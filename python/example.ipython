import numpy as np
import pandas as pd
from matplotlib import pyplot
import statsmodels.api as sm

%run quality_control.py


gapsCCEE, df_CCEE = quality_control("../data/RESTORE.TXT", "01/09/2013", "30/11/2013", tzone="UTC")

gapsMONT, df_MONT = quality_control("../data/año2013.txt", "01/09/2013", "30/11/2013", data_format="MONT",tzone="CET")

# Correlación
df_CCEE["Tout"].corr(df_MONT["Tout"])

# Ploteo
df_CCEE["Tout"].plot()
df_MONT["Tout"].plot()

pyplot.show()

(df_MONT["Tout"]-df_CCEE["Tout"]).plot()

pyplot.show()

# downsampling 
tseries = df_CCEE.index
tseries.tz = None
df_CCEE_naive = df_CCEE.copy()
df_CCEE_naive = df_CCEE_naive.reindex(tseries)
#
df_MONT_naive = df_MONT.copy()
df_MONT_naive = df_MONT_naive.reindex(tseries)
#
tout_hourly_CCEE = df_CCEE_naive["Tout"].resample("H")
tout_hourly_MONT = df_MONT_naive["Tout"].resample("H")

tout_daily_CCEE = df_CCEE_naive["Tout"].resample("D")
tout_daily_MONT = df_MONT_naive["Tout"].resample("D")

df_CCEE["Tout"].describe()

#
# Regression

Y = tout_daily_CCEE.values

X = tout_daily_MONT.values


# Remove NaNs from both vectors. Easier in new version of statsmodel

notnanvalues = np.logical_and(np.logical_not(np.isnan(X)),np.logical_not(np.isnan(Y)))
X = X[notnanvalues]
Y = Y[notnanvalues]



X = sm.add_constant(X)

model = sm.OLS(Y, X)

results = model.fit()

print(results.summary())
                            OLS Regression Results                            
==============================================================================
Dep. Variable:                      y   R-squared:                       0.986
Model:                            OLS   Adj. R-squared:                  0.986
Method:                 Least Squares   F-statistic:                     5303.
Date:                Wed, 06 May 2015   Prob (F-statistic):           8.99e-73
Time:                        18:40:51   Log-Likelihood:                -61.068
No. Observations:                  79   AIC:                             126.1
Df Residuals:                      77   BIC:                             130.9
Df Model:                           1                                         
==============================================================================
                 coef    std err          t      P>|t|      [95.0% Conf. Int.]
------------------------------------------------------------------------------
x1             1.0133      0.014     72.825      0.000         0.986     1.041
const         -0.3597      0.268     -1.341      0.184        -0.894     0.174
==============================================================================
Omnibus:                       57.645   Durbin-Watson:                   2.322
Prob(Omnibus):                  0.000   Jarque-Bera (JB):              484.064
Skew:                          -1.941   Prob(JB):                    7.71e-106
Kurtosis:                      14.488   Cond. No.                         86.7
==============================================================================

hindex = []
for index in df_CCEE.index:
    hindex.append(heat_index(df_CCEE["Tout"].ix[index], df_CCEE["H out"].ix[index]))

df_CCEE["Heat_Index"] = hindex

 %run fill_gaps_method1.py

fill_gap_method_simple(tout_hourly_CCEE,tout_hourly_MONT)


Y = tout_hourly_CCEE.values
X = tout_hourly_MONT.values

notnanvalues = np.logical_and(np.logical_not(np.isnan(X)),np.logical_not(np.isnan(Y)))

X = X[notnanvalues]
Y = Y[notnanvalues]

X = sm.add_constant(X)

model = sm.OLS(Y, X)

results = model.fit()

print(results.summary())
                            OLS Regression Results                            
==============================================================================
Dep. Variable:                      y   R-squared:                       0.973
Model:                            OLS   Adj. R-squared:                  0.972
Method:                 Least Squares   F-statistic:                 2.547e+04
Date:                Mon, 18 May 2015   Prob (F-statistic):               0.00
Time:                        18:30:21   Log-Likelihood:                -677.71
No. Observations:                 722   AIC:                             1359.
Df Residuals:                     720   BIC:                             1369.
Df Model:                           1                                         
==============================================================================
                 coef    std err          t      P>|t|      [95.0% Conf. Int.]
------------------------------------------------------------------------------
x1             0.9929      0.006    159.580      0.000         0.981     1.005
const          0.0608      0.092      0.664      0.507        -0.119     0.240
==============================================================================
Omnibus:                      212.147   Durbin-Watson:                   0.429
Prob(Omnibus):                  0.000   Jarque-Bera (JB):              577.142
Skew:                           1.478   Prob(JB):                    4.73e-126
Kurtosis:                       6.231   Cond. No.                         58.6
==============================================================================

results.params
Out[60]: array([ 0.99289709,  0.06077207])

In [75]: %run fill_gaps_method2.py

fill_gap_method_regress(results.params, tout_hourly_CCEE, tout_hourly_MONT)
Out[76]: 
2014-03-01 00:00:00    12.700000
2014-03-01 01:00:00    12.616667
2014-03-01 02:00:00    12.600000
2014-03-01 03:00:00    12.466667
2014-03-01 04:00:00    12.300000
2014-03-01 05:00:00    12.216667
2014-03-01 06:00:00    12.133333
2014-03-01 07:00:00    12.250000
2014-03-01 08:00:00    12.683333
2014-03-01 09:00:00    13.300000
2014-03-01 10:00:00    14.100000
2014-03-01 11:00:00    14.733333
2014-03-01 12:00:00    16.216667
2014-03-01 13:00:00    18.233333
2014-03-01 14:00:00    17.850000
...
2014-03-31 10:00:00    14.888035
2014-03-31 11:00:00    16.112608
2014-03-31 12:00:00    16.129157
2014-03-31 13:00:00    15.831288
2014-03-31 14:00:00    16.460122
2014-03-31 15:00:00    16.575960
2014-03-31 16:00:00    15.980222
2014-03-31 17:00:00    15.748546
2014-03-31 18:00:00    15.665805
2014-03-31 19:00:00    15.467225
2014-03-31 20:00:00    15.235549
2014-03-31 21:00:00    15.202453
2014-03-31 22:00:00    15.185904
2014-03-31 23:00:00    15.715450
2014-04-01 00:00:00    15.300000
Freq: H, Length: 745

# Checking initial CCEE data timezone
gapsCCEE_1, df_CCEE_1 = quality_control("../data/RESTORE31.TXT", "01/03/2013 01:00", "27/10/2013 20:00", tzone="UTC")
gapsMONT_1, df_MONT_1 = quality_control("../data/año2013.txt", "01/03/2013 00:00", "27/10/2013 19:00", data_format="MONT",tzone="CET")

df_CCEE_1["Tout"].corr(df_MONT_1["Tout"])
Out[4]: 0.92829960721076732

index_CCEE_new = df_CCEE_1.index.shift(-1,"H")
df_CCEE_1["shifted_dates"] = index_CCEE_new
df_CCEE_1 = df_CCEE_1.set_index("shifted_dates")

tseries=df_MONT_1.index
tseries.tz = None
df_MONT_1 = df_MONT_1.reindex(tseries)
 
df_CCEE_1["Tout"].corr(df_MONT_1["Tout"])
Out[16]: 0.97210698085312697

# Save dframe
df_MONT_1.save("filename")

# load
df_CCEE = pd.load("filename")


Note: from 0.11.1 to_pickle and read_pickle will be the preferred way to do this.



windsp_hourly_MONT = df_MONT_naive["Wind Speed"].resample("H")
windsp_daily_MONT = df_MONT_naive["Wind Speed"].resample("D")

rain_hourly_MONT = df_MONT_naive["Rain"].resample("H",how='sum')
rain_daily_MONT = df_MONT_naive["Rain"].resample("D",how='sum')
rain_monthly_MONT = df_MONT_naive["Rain"].resample("M",how='sum')

dewp_daily_MONT = df_MONT_naive["Dew point"].resample("D")
dewp_hourly_MONT = df_MONT_naive["Dew point"].resample("H")


press_daily_MONT = df_MONT_naive["Pressure"].resample("D")
press_hourly_MONT = df_MONT_naive["Pressure"].resample("H")


tout_daily_MONT.hist(bins = 50)

tout_hourly_MONT.describe()
Out[62]: 
count    8759.000000
mean       18.200571
std         5.720074
min         3.083333
25%        14.116667
50%        18.333333
75%        22.316667
max        35.983333
dtype: float64


tout_hourly_MONT.hist(bins = 50, normed=True, alpha = 0.4)
tout_hourly_MONT[np.logical_not(np.isnan(tout_hourly_MONT))].plot(kind='KDE',style='k--') ### KDE = Kernel Density Estimation 

import scipy.stats
x = np.arange(0,45,0.5)
y = scipy.stats.norm(18.2,5.720).pdf(x)
pyplot.plot(x,y)




dewp_hourly_MONT.describe()
Out[79]: 
count    8759.000000
mean       13.367101
std         4.446166
min        -2.466667
25%        10.100000
50%        13.833333
75%        16.850000
max        22.033333
dtype: float64


dewp_hourly_MONT.hist(bins = 50, normed=True)

dewp_hourly_MONT[np.logical_not(np.isnan(dewp_hourly_MONT))].plot(kind='KDE',style='k--')

x=np.arange(0,40,0.25)
y = scipy.stats.norm(13.367,4.4462).pdf(x)
pyplot.plot(x,y)

press_hourly_MONT.describe()
Out[99]: 
count    8759.000000
mean     1016.158996
std         6.039532
min       980.533333
25%      1013.225000
50%      1015.733333
75%      1018.983333
max      1033.133333
dtype: float64

press_hourly_MONT.hist(bins = 50, normed=True, alpha = 0.4)
press_hourly_MONT[np.logical_not(np.isnan(press_hourly_MONT))].plot(kind='KDE',style='k--')
x = np.arange(970,1030,2.5)
y = scipy.stats.norm(1016.158996,6.039532).pdf(x)
pyplot.plot(x,y)



tmax_daily_MONT = df_MONT_naive["Tout"].resample("D", how="max")
tmin_daily_MONT = df_MONT_naive["Tout"].resample("D", how="min")




In [106]: tout_daily_MONT.hist(bins = 50, normed=True, alpha = 0.4, label="Exp.")
Out[106]: <matplotlib.axes.AxesSubplot at 0xcae27ac>

In [107]: tout_daily_MONT[np.logical_not(np.isnan(tout_daily_MONT))].plot(kind='KDE',style='k--', label="KDE")
Out[107]: <matplotlib.axes.AxesSubplot at 0xcae27ac>

In [108]: pyplot.plot(x,y, lw=2, label="Normal")
Out[108]: [<matplotlib.lines.Line2D at 0xcacecec>]

In [109]: pyplot.legend()
Out[109]: <matplotlib.legend.Legend at 0xcdbab0c>

In [82]: pyplot.xlabel("Temperatura ($^\circ$C)")
Out[82]: <matplotlib.text.Text at 0xd48876c>

In [83]: pyplot.ylabel("Histograma Normalizado")
Out[83]: <matplotlib.text.Text at 0xd4867ec>

In [84]: panel.xaxis.label.set_fontsize(18)

In [110]: pyplot.show()


# Compute Heat Index


import numpy as np
import pandas as pd
from matplotlib import pyplot
import statsmodels.api as sm


%run read_data_F.py

t_CCEE =read_data("tempFILLED.csv", "tout")

h_CCEE =read_data("houtFILLED.csv", "hout")

%run heat_index.py

h_CCEE =read_data("houtFILLED.csv", "hout")

 map(heat_index, t_CCEE["tout"], h_CCEE["hout"])
Out[12]: 
[13.814336419753081,
 15.617210648148152,
 16.042781635802474,
 14.556604938271608,
 10.80377700617284,
 10.704888117283948,
 12.138746141975309,
 12.506894290123457,
 12.507615740740741,
 11.553584104938276,
.
.
.
.

# Creamos un dataframe
hi_CCEE = pd.DataFrame(data=hi, index=t_CCEE.index, columns=["Heat Index"])
hi_CCEE["Heat Index"].plot()
Out[25]: <matplotlib.axes.AxesSubplot at 0xb230ddec>

t_CCEE["tout"].plot()
Out[26]: <matplotlib.axes.AxesSubplot at 0xb230ddec>

In [27]: pyplot.show()

(t_CCEE["tout"]-hi_CCEE["Heat Index"]).plot()
Out[28]: <matplotlib.axes.AxesSubplot at 0xaee104c>

pyplot.show()
